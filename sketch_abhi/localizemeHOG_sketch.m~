function [resstruct,t] = localizemeHOG(I, models, localizeparams)
% Localize set of models in an Image's feature pyramid via sliding
% windows and (dot product + bias recognition score).  If there is a
% small number of models (such as in per-exemplar mining), then
% fconvblas is used for detection.  If the number is large, then the
% BLOCK feature matrix method (with a single matrix multiplication) is
% used.
%
% I: Input image (or already precomputed pyramid)
% models: A cell array of models to localize inside this image
%   models{:}.model.w: Learned template
%   models{:}.model.b: Learned template's offset
% localizeparams: Localization parameters (see get_default_mining_params.m)
%
% resstruct: Sliding window output struct with 
%   resstruct.bbs{:}: Detection boxes and pyramid locations
%   resstruct.xs{:}: Detection features
% t: The Feature pyramid output
%
% Tomasz Malisiewicz (tomasz@cmu.edu)

if ~exist('localizeparams','var')
  localizeparams = get_default_mining_params;
end
% doflip = localizeparams.FLIP_LR;
doflip = 0;
tic
localizeparams.FLIP_LR = 0;
[rs1, t1] = localizemeHOGdriver(I, models, localizeparams);
rs1 = prune_nms(rs1, localizeparams);
toc
if doflip == 1
  localizeparams.FLIP_LR = 1;
  [rs2, t2] = localizemeHOGdriver(I, models, localizeparams);
  rs2 = prune_nms(rs2, localizeparams);
else %If there is no flip, then we are done
  resstruct = rs1;
  t = t1;
  return;
end

%If we got here, then the flip was turned on and we need to concatenate
%results
for q = 1:length(rs1.bbs)
  rs1.xs{q} = cat(2,rs1.xs{q}, ...
                  rs2.xs{q});


  rs1.bbs{q} = cat(1,rs1.bbs{q},rs2.bbs{q});
end

resstruct = rs1;

%Concatenate normal and LR pyramids
t = cell(2,1);
t{1} = t1;
t{2} = t2;

function [resstruct,t] = localizemeHOGdriver(I, models, ...
                                             localizeparams)

% if length(models)>20
  [resstruct,t] = localizemeHOGdriverBLOCK(I, models, ...
                                         localizeparams);
  return;
% end
% 
% adjust = 0;
% if isfield(models{1},'models_name') ...
%       && ~isempty(strfind(models{1}.models_name,'-ncc'))
%   adjust = 1;
% end
% 
% if adjust == 1
%   fprintf(1,'DISTANCE ADJUSTMENT TURNED ON\n');
% end
% 
% N = length(models);
% ws = cellfun2(@(x)x.model.w,models);
% bs = cellfun2(@(x)x.model.b,models);
% 
% %NOTE: all exemplars in this set must have the same sbin
% sbin = models{1}.model.init_params.sbin;
% t = get_pyramid(I, sbin, length(models), localizeparams);
% 
% resstruct.padder = t.padder;
% resstruct.bbs = cell(N,1);
% xs = cell(N,1);
% 
% maxers = cell(N,1);
% for q = 1:N
%   maxers{q} = -inf;
% end
% 
% %start with smallest level first
% for level = length(t.hog):-1:1
%   featr = t.hog{level};
%   
%   %Use blas-based fast convolution code
%   rootmatch = fconvblas(featr, ws, 1, N);
%   rmsizes = cellfun2(@(x)size(x), ...
%                      rootmatch);
%   
%   for exid = 1:N
%     if prod(rmsizes{exid}) == 0
%       continue
%     end
% 
%     cur_scores = rootmatch{exid} - bs{exid};
%     
%     [aa,indexes] = sort(cur_scores(:),'descend');
%     NKEEP = sum((aa>maxers{exid}) & (aa>=localizeparams.thresh));
%     aa = aa(1:NKEEP);
%     indexes = indexes(1:NKEEP);
%     if NKEEP==0
%       continue
%     end
%     sss = size(ws{exid});
%     
%     [uus,vvs] = ind2sub(rmsizes{exid}(1:2),...
%                         indexes);
%     
%     scale = t.scales(level);
%     
%     o = [uus vvs] - t.padder;
% 
%     bbs = ([o(:,2) o(:,1) o(:,2)+size(ws{exid},2) ...
%                o(:,1)+size(ws{exid},1)] - 1) * ...
%              sbin/scale + 1 + repmat([0 0 -1 -1],length(uus),1);
% 
%     bbs(:,5:12) = 0;
%     bbs(:,5) = (1:size(bbs,1));
%     bbs(:,6) = exid;
%     bbs(:,8) = scale;
%     bbs(:,9) = uus;
%     bbs(:,10) = vvs;
%     bbs(:,12) = aa;
%     
%     if (localizeparams.FLIP_LR == 1)
%       bbs = flip_box(bbs,t.size);
%       bbs(:,7) = 1;
%     end
%     
%     resstruct.bbs{exid} = cat(1,resstruct.bbs{exid},bbs);
%     
%     if localizeparams.SAVE_SVS == 1
%       for z = 1:NKEEP
%         xs{exid}{end+1} = ...
%             reshape(t.hog{level}(uus(z)+(1:sss(1))-1, ...
%                                  vvs(z)+(1:sss(2))-1,:), ...
%                     [],1);
%       end
%     end
%         
%     if (NKEEP > 0)
%       newtopk = min(localizeparams.TOPK,size(resstruct.bbs{exid},1));
%       [aa,bb] = psort(-resstruct.bbs{exid}(:,end),newtopk);
%       resstruct.bbs{exid} = resstruct.bbs{exid}(bb,:);
%       if localizeparams.SAVE_SVS == 1
%         xs{exid} = xs{exid}(:,bb);
%       end
%       maxers{exid} = min(-aa);
%     end    
%   end
% end
% 
% if localizeparams.SAVE_SVS == 1
%   resstruct.xs = xs;
% else
%   resstruct.xs = cell(N,1);
% end
% fprintf(1,'\n');
% 
% 
% if adjust == 1
%   %% Here we run an auxilliary distance metric for detections
%   for j = 1:length(resstruct.bbs)
%     if isempty(resstruct.bbs{j})
%       continue
%     end
%     xs = cat(2, ...
%              resstruct.xs{j}{:});
%     norms = sqrt(sum(xs.^2,1));
%     xs = xs ./ repmat(norms,size(xs,1),1);
%     newd =  xs'* ...
%             (models{j}.model.x)/norm(models{j}.model.x);
%     [aa,bb] = sort(newd, ...
%                    'descend');
%     resstruct.score_grid{j} = aa';
%     resstruct.bbs{j} = ...
%         resstruct.bbs{j}(bb);
%     resstruct.xs{j} = ...
%         resstruct.xs{j}(bb);
%   end
% end
% 

function [resstruct,t] = localizemeHOGdriverBLOCK(I, models, ...
                                             localizeparams)

N = length(models);
ws = cellfun2(@(x)x.model.w,models);
bs = cellfun(@(x)x.model.b,models)';

sbin = models{1}.model.init_params.sbin;
t = get_pyramid(I, sbin, length(models), localizeparams);
resstruct.padder = t.padder;
osThresh = [0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9];

for exid = 1:N
    sz = size(ws{exid});
    [allbb,alluv,alllvl,t] = pad_and_get_all_bb(t,sz,sbin);
    oss = getosmatrix_bb(allbb, models{exid}.gt_box);
    keepIds = (find(oss>=min(osThresh)));
    
    os = oss(keepIds);
    bbs = allbb(keepIds, :);
    uvs = alluv(keepIds,:);
    lvls = alllvl(keepIds);
    feats = zeros(prod(sz), length(lvls));
    
    for id = 1:length(lvls)
        feats(:,id) = reshape(...
            t.hog{lvls(id)}(uvs(id,1):uvs(id,1)+sz(1)-1, ...
            uvs(id,2):uvs(id,2)+sz(2)-1, :),[],1);
    end
    keyboa
    scores = ws{exid}(:)'*feats - bs{exid};
    %[sorted_scores, sorted_ind] = sort(scores, 'descend');
%     bbb = zeros(length(osThresh), 12);
    for o = 1:length(osThresh)
        ids = find(os>=osThresh(o));
        [score, ind] = max(scores(ids));
        if ~isempty(ind)
            bbb(o,1:4) = bbs(ind(1),:);        
            bbb(o,5:12) = 0;
            bbb(o,5) = 1;
            bbb(o,6) = exid;
            bbb(o,8) = lvls(ind(1));
            bbb(o,9) = uvs(ind(1),1);
            bbb(o,10) = uvs(ind(1),2);
            bbb(o,12) = score;
            ooo(o) = osThresh(o);
        else
            break;
        end
    end
  if (localizeparams.FLIP_LR == 1)
    bbb = flip_box(bbb,t.size);
    bbb(:,7) = 1;
  end
  resstruct.bbs{exid} = bbb;
  resstruct.oss{exid} = ooo;
end
resstruct.xs = cell(N,1);
fprintf(1,'\n');


function rs = prune_nms(rs, params)
%Prune via nms to eliminate redundant detections

%If the field is missing, or it is set to 1, then we don't need to
%process anything
if ~isfield(params,'NMS_MINES_OS') || (params.NMS_MINES_OS >= 1)
  return;
end

rs.bbs = cellfun2(@(x)nms(x,params.NMS_MINES_OS),rs.bbs);

if ~isempty(rs.xs)
  for i = 1:length(rs.bbs)
    if ~isempty(rs.xs{i})
      %NOTE: the fifth field must contain elements
      rs.xs{i} = rs.xs{i}(:,rs.bbs{i}(:,5) );
    end
  end
end

function t = get_pyramid(I, sbin, N, localizeparams)
%Extract feature pyramid from variable I (which could be either an image,
%or already a feature pyramid)

if isnumeric(I)

  flipstring = '';
  if (localizeparams.FLIP_LR == 1)
    flipstring = '@F';
    I = flip_image(I);
  else    
    %take unadulterated "aka" un-flipped image
  end
  
  clear t
  t.size = size(I);

  fprintf(1,'Localizing %d in I=[%dx%d@%d%s]',N,...
          t.size(1),t.size(2),localizeparams.lpo,flipstring);

  %Compute pyramid
  [t.hog,t.scales] = featpyramid2(I, sbin, localizeparams);  
  t.padder = localizeparams.pyramid_padder;
  for level = 1:length(t.hog)
    t.hog{level} = padarray(t.hog{level}, [t.padder t.padder 0], 0);
  end
  
  minsizes = cellfun(@(x)min([size(x,1) size(x,2)]), t.hog);
  t.hog = t.hog(minsizes >= t.padder*2);
  t.scales = t.scales(minsizes >= t.padder*2);
  
  
  %if only_compute_pyramid == 1
  %  resstruct = t;
  %  return;
  %end
  
else
  fprintf(1,'Already found features\n');
  
  if iscell(I)
    if localizeparams.FLIP_LR==1
      t = I{2};
    else
      t = I{1};
    end
  else
    t = I;
  end
  
  fprintf(1,'Localizing %d in I=[%dx%d@%d]',N,...
        t.size(1),t.size(2),localizeparams.lpo);
end


function [allbb,alluv,alllvl,t] = pad_and_get_all_bb(t,hg_size,sbin)
%Extract all bounding boxes from the feature pyramid (and pad the pyramid)

allbb = cell(length(t.hog),1);
alluv = cell(length(t.hog),1);
alllvl= cell(length(t.hog),1);
for level = 1:length(t.hog)
  t.hog{level} = padarray(t.hog{level}, [t.padder t.padder 0], ...
                          0);
  curids = zeros(size(t.hog{level},1),size(t.hog{level},2));
  curids = reshape(1:numel(curids),size(curids));
  goodids = curids(1:size(curids,1)-hg_size(1)+1,1:size(curids,2)- ...
                   hg_size(2)+1);
  [rawuuu,rawvvv] = ind2sub(size(curids),goodids(:));
  uuu = rawuuu - 2*t.padder;
  vvv = rawvvv - 2*t.padder;
  
  bb = ([vvv uuu vvv+hg_size(2) uuu+hg_size(1)] -1) * ...
       sbin/t.scales(level) + 1;
  bb(:,3:4) = bb(:,3:4) - 1;
  
  allbb{level} = bb;
  alluv{level} = [rawuuu rawvvv];
  alllvl{level} = goodids(:)*0+level;
end

alluv = cat(1,alluv{:});
allbb = cat(1,allbb{:});
alllvl = cat(1,alllvl{:});

